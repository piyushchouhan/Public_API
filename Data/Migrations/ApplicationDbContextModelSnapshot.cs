// <auto-generated />
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Data.Models.Condition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("Data.Models.Current", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Cloud")
                        .HasColumnType("int");

                    b.Property<int>("ConditionId")
                        .HasColumnType("int");

                    b.Property<double>("Dewpoint_C")
                        .HasColumnType("float");

                    b.Property<double>("Dewpoint_F")
                        .HasColumnType("float");

                    b.Property<double>("Feelslike_C")
                        .HasColumnType("float");

                    b.Property<double>("Feelslike_F")
                        .HasColumnType("float");

                    b.Property<double>("Gust_Kph")
                        .HasColumnType("float");

                    b.Property<double>("Gust_Mph")
                        .HasColumnType("float");

                    b.Property<double>("Heatindex_C")
                        .HasColumnType("float");

                    b.Property<double>("Heatindex_F")
                        .HasColumnType("float");

                    b.Property<int>("Humidity")
                        .HasColumnType("int");

                    b.Property<int>("Is_Day")
                        .HasColumnType("int");

                    b.Property<string>("Last_Updated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Last_Updated_Epoch")
                        .HasColumnType("bigint");

                    b.Property<double>("Precip_In")
                        .HasColumnType("float");

                    b.Property<double>("Precip_Mm")
                        .HasColumnType("float");

                    b.Property<double>("Pressure_In")
                        .HasColumnType("float");

                    b.Property<double>("Pressure_Mb")
                        .HasColumnType("float");

                    b.Property<double>("Temp_C")
                        .HasColumnType("float");

                    b.Property<double>("Temp_F")
                        .HasColumnType("float");

                    b.Property<double>("Uv")
                        .HasColumnType("float");

                    b.Property<double>("Vis_Km")
                        .HasColumnType("float");

                    b.Property<double>("Vis_Miles")
                        .HasColumnType("float");

                    b.Property<int>("Wind_Degree")
                        .HasColumnType("int");

                    b.Property<string>("Wind_Dir")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Wind_Kph")
                        .HasColumnType("float");

                    b.Property<double>("Wind_Mph")
                        .HasColumnType("float");

                    b.Property<double>("Windchill_C")
                        .HasColumnType("float");

                    b.Property<double>("Windchill_F")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ConditionId");

                    b.ToTable("Currents");
                });

            modelBuilder.Entity("Data.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<string>("Localtime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Localtime_Epoch")
                        .HasColumnType("bigint");

                    b.Property<double>("Lon")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tz_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Data.Models.Current", b =>
                {
                    b.HasOne("Data.Models.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condition");
                });
#pragma warning restore 612, 618
        }
    }
}
